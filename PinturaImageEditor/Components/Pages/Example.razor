@page "/example"
@using PinturaImageEditor.Components.Component
@using PinturaImageEditor.Data
@using PinturaImageEditor.Services
@using static PinturaImageEditor.Components.Dialog.DialogImageEditor
@using static PinturaImageEditor.Data.ArchiveModel
<h3>Pintura Example</h3>
<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" class="rz-mb-5">
	<ImageSelect Text="Select Image" OnSave="AddImage" />
	<RadzenButton Click="@Save" Variant="Variant.Flat" Text="Save" Style="width: 120px" IsBusy="@_Saving" Disabled="@(!_Savable)" BusyText="Saving..." />
</RadzenStack>
<RadzenRow>
	<RadzenColumn Size="12">
		<RadzenRow>
			@foreach (var item in _Archives.Where(s => s.Status != EArchiveStatus.Deleted))
			{
				<RadzenColumn Size="12" SizeXS="3">
					<ImgCard Img="item" OnEdit="EditImage" OnRemove="RemoveImg" />
				</RadzenColumn>
			}
		</RadzenRow>
	</RadzenColumn>
</RadzenRow>
@code {
	[Inject] IJSRuntime JS { get; set; }
	[Inject] CoreDbContext DB { get; set; }
	[Inject] DialogService DialogService { get; set; }
	[Inject] ArchiveService ArchiveService { get; set; }
	[Inject] NotificationService NotificationService { get; set; }
	List<ArchiveModel> _Archives { get; set; }
	bool _Saving { get; set; } = false;
	bool _Savable { get => _Archives.Where(s => s.Status != EArchiveStatus.Normal).Any(); }

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		_Archives = DB.Archive.ToList();
		StateHasChanged();
	}
	async Task Save()
	{
		_Saving = true;
		try
		{
			List<ArchiveResult> erroList = new List<ArchiveResult>();
			foreach (var item in _Archives.Where(s => s.Status != EArchiveStatus.Normal).ToList())
			{
				var result = await ArchiveService.SaveArchive(item);
				if (result.Success)
				{
					if (item.Status == EArchiveStatus.New)
					{
						DB.Archive.Add(item);
					}
					else if (item.Status == EArchiveStatus.Deleted)
					{
						_Archives.Remove(item);
						if (item.Id != 0)
						{
							DB.Archive.Remove(item);
						}
					}
				}
				else
				{
					erroList.Add(result);
				}
			};
			if (erroList.Any())
			{
				var result = await DialogService.Alert(string.Join('\n', erroList), "Error");
				return;
			}
			await DB.SaveChangesAsync();

			_Archives.Update(s => s.Status = EArchiveStatus.Normal);
			NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = $"Images saved successfully!!", Duration = 3000 });
		}
		catch (Exception ex)
		{
			var result = await DialogService.Alert(ex.Message);
		}
		_Saving = false;
	}
	void AddImage(DialogImageResult img)
	{
		_Archives.Add(new ArchiveModel() { Url = img.Url, Name = img.Name, Status = EArchiveStatus.New });
	}

	async void EditImage(ImgCard.ImgCardEvent item)
	{
		if (item.Img.Url.StartsWith("blob"))
		{
			await JS.InvokeVoidAsync("URL.revokeObjectURL", item.Img.Url);
		}
		else if (String.IsNullOrEmpty(item.Img.OldUrl))
		{
			item.Img.OldUrl = item.Img.Url;
			item.Img.Status = EArchiveStatus.Edited;
		}
		item.Img.Url = item.Data.Url;
		StateHasChanged();
	}
	async void RemoveImg(ArchiveModel item)
	{
		var result = await DialogService.Confirm("Are you sure you want to remote this image?");
		if (result == true)
		{
			item.Status = EArchiveStatus.Deleted;
			StateHasChanged();
		}
	}
}
