@inject DialogService DialogService
@using Components.Dialog
@using static PinturaImageEditor.Components.Dialog.DialogImageEditor

@if (Src is null)
{
	<label class="@GetCssClass()">
		<input @ref=input type="file" id="select-image" accept="image/*" @onchange="OpenEditor" style="display: none;" />
		<span class="rz-button-box">
			@if (ChildContent != null)
			{
				@ChildContent
			}
			else
			{
				@if (IsBusy)
				{
					<RadzenIcon Icon="refresh" Style="animation: rotation 700ms linear infinite" />
					@if (!string.IsNullOrEmpty(BusyText))
					{
						<span class="rz-button-text">@BusyText</span>
					}
				}
				else
				{
					@if (!string.IsNullOrEmpty(@Icon))
					{
						<i class="rz-button-icon-left rzi" style="@(!string.IsNullOrEmpty(IconColor) ? $"color:{IconColor}" : null)">@((MarkupString)Icon)</i>
					}
					@if (!string.IsNullOrEmpty(Text))
					{
						<span class="rz-button-text">@Text</span>
					}
				}
			}
		</span>
	</label>
}
else
{
	<RadzenButton Text="@Text"
				  Icon="@Icon"
				  IconColor="@IconColor"
				  IsBusy="@IsBusy"
				  BusyText="@BusyText"
				  ButtonStyle="@ButtonStyle"
				  ButtonType="@ButtonType"
				  Variant="@Variant"
				  Shade="@Shade"
				  Size="@Size"
				  Disabled="@Disabled"
				  Click="OpenEditorSrc"
				  ChildContent="@ChildContent" />
}

@code {
	internal string getButtonSize()
	{
		return Size == ButtonSize.Medium ? "md" : Size == ButtonSize.Large ? "lg" : Size == ButtonSize.Small ? "sm" : "xs";
	}
	string GetCssClass()
	{
		if (Attributes != null && Attributes.TryGetValue("class", out var @class) && !string.IsNullOrEmpty(Convert.ToString(@class)))
		{
			return $"{GetComponentCssClass()} {@class}";
		}

		return GetComponentCssClass();
	}
	string GetComponentCssClass()
	{
		return $"rz-button rz-button-{getButtonSize()} rz-variant-{Enum.GetName(typeof(Variant), Variant).ToLowerInvariant()} rz-{Enum.GetName(typeof(ButtonStyle), ButtonStyle).ToLowerInvariant()} rz-shade-{Enum.GetName(typeof(Shade), Shade).ToLowerInvariant()}{(IsDisabled ? " rz-state-disabled" : "")}{(string.IsNullOrEmpty(Text) && !string.IsNullOrEmpty(Icon) ? " rz-button-icon-only" : "")}";
	}

	[Parameter(CaptureUnmatchedValues = true)]
	public IReadOnlyDictionary<string, object> Attributes { get; set; }
	/// <summary>
	/// Gets a value indicating whether this instance is disabled.
	/// </summary>
	/// <value><c>true</c> if this instance is disabled; otherwise, <c>false</c>.</value>
	public bool IsDisabled { get => Disabled || IsBusy; }

	/// <summary>
	/// Gets or sets the child content.
	/// </summary>
	/// <value>The child content.</value>
	[Parameter]
	public RenderFragment ChildContent { get; set; }

	/// <summary>
	/// Gets or sets the text.
	/// </summary>
	/// <value>The text.</value>
	[Parameter]
	public string Text { get; set; } = "";

	/// <summary>
	/// Gets or sets the icon.
	/// </summary>
	/// <value>The icon.</value>
	[Parameter]
	public string Icon { get; set; }

	/// <summary>
	/// Gets or sets the icon color.
	/// </summary>
	/// <value>The icon color.</value>
	[Parameter]
	public string IconColor { get; set; }

	/// <summary>
	/// Gets or sets a value indicating whether this instance busy text is shown.
	/// </summary>
	/// <value><c>true</c> if this instance busy text is shown; otherwise, <c>false</c>.</value>
	[Parameter]
	public bool IsBusy { get; set; }

	/// <summary>
	/// Gets or sets the button style.
	/// </summary>
	/// <value>The button style.</value>
	[Parameter]
	public ButtonStyle ButtonStyle { get; set; } = ButtonStyle.Primary;

	/// <summary>
	/// Gets or sets the type of the button.
	/// </summary>
	/// <value>The type of the button.</value>
	[Parameter]
	public ButtonType ButtonType { get; set; } = ButtonType.Button;

	/// <summary>
	/// Gets or sets the design variant of the button.
	/// </summary>
	/// <value>The variant of the button.</value>
	[Parameter]
	public Variant Variant { get; set; } = Variant.Filled;

	/// <summary>
	/// Gets or sets the color shade of the button.
	/// </summary>
	/// <value>The color shade of the button.</value>
	[Parameter]
	public Shade Shade { get; set; } = Shade.Default;

	/// <summary>
	/// Gets or sets the size.
	/// </summary>
	/// <value>The size.</value>
	[Parameter]
	public ButtonSize Size { get; set; } = ButtonSize.Medium;
	/// <summary>
	/// Gets or sets a value indicating whether this <see cref="RadzenButton"/> is disabled.
	/// </summary>
	/// <value><c>true</c> if disabled; otherwise, <c>false</c>.</value>
	[Parameter]
	public bool Disabled { get; set; }

	/// <summary>
	/// Gets or sets the busy text.
	/// </summary>
	/// <value>The busy text.</value>
	[Parameter]
	public string BusyText { get; set; } = "";
	[Parameter]
	public string? Src { get; set; }
	[Parameter]
	public EventCallback<DialogImageResult> OnSave { get; set; }
	ElementReference input { get; set; }
	async Task OpenEditor()
	{
		IsBusy = true;
		DialogImageResult dialogResult = await DialogService.OpenAsync<DialogImageEditor>("",
			new Dictionary<string, object?>() { { "ElementID", input } },
			new DialogOptions() { });
		if (dialogResult.Name != null && dialogResult.Url != null)
		{
			await OnSave.InvokeAsync(dialogResult);
		}
		IsBusy = false;
	}
	async Task OpenEditorSrc()
	{
		IsBusy = true;
		DialogImageResult dialogResult = await DialogService.OpenAsync<DialogImageEditor>("",
			new Dictionary<string, object?>() { { "Src", Src } },
			new DialogOptions() { });
		if (dialogResult.Name != null && dialogResult.Url != null)
		{
			await OnSave.InvokeAsync(dialogResult);
		}
		IsBusy = false;
	}
}
